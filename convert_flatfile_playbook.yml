---
# Playbook to convert flat files to Ansible inventory and group_vars
- name: Convert Flat File Database Inventory to Ansible Structure
  hosts: localhost
  gather_facts: yes
  vars:
    # Input/Output configuration
    flatfile_path: "{{ input_file | default('databases.txt') }}"
    inventory_output: "{{ output_inventory | default('generated_inventory.yml') }}"
    vault_output: "{{ output_vault | default('group_vars/all/vault.yml') }}"

    # Conversion settings
    default_username: "{{ default_db_username | default('nist_scan_user') }}"
    create_vault_file: "{{ generate_vault | default(true) }}"
    encrypt_vault: "{{ vault_encrypt | default(true) }}"

    # Directory structure
    group_vars_structure:
      - "group_vars/all"
      - "group_vars/mssql_databases"
      - "group_vars/oracle_databases"
      - "group_vars/sybase_databases"

  tasks:
    - name: Validate input file exists
      stat:
        path: "{{ flatfile_path }}"
      register: flatfile_check
      failed_when: not flatfile_check.stat.exists

    - name: Display conversion configuration
      debug:
        msg: |
          Flat File to Inventory Conversion
          ================================
          Input file: {{ flatfile_path }}
          Inventory output: {{ inventory_output }}
          Vault output: {{ vault_output }}
          Default username: {{ default_username }}
          Create vault: {{ create_vault_file }}
          Encrypt vault: {{ encrypt_vault }}

    - name: Create directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ group_vars_structure }}"

    - name: Read and parse flat file
      block:
        - name: Read flat file content
          slurp:
            src: "{{ flatfile_path }}"
          register: flatfile_content

        - name: Parse flat file lines
          set_fact:
            parsed_lines: >-
              {{
                (flatfile_content.content | b64decode).split('\n') |
                select('match', '^[^#].*') |
                select('match', '.+') |
                map('split', ' ') |
                select('length', '>=', 6) |
                list
              }}

        - name: Display parsed entries
          debug:
            msg: "Found {{ parsed_lines | length }} valid database entries"

    - name: Initialize inventory structure
      set_fact:
        mssql_hosts: {}
        oracle_hosts: {}
        sybase_hosts: {}
        vault_passwords: {}

    - name: Process each database entry
      set_fact:
        current_host_id: "{{ item[1] | replace('.', '_') | replace('-', '_') }}_{{ item[2] }}_{{ item[4] }}"
        current_platform: "{{ item[0] | upper }}"
        current_host_vars:
          "{{ item[0] | lower }}_server": "{{ item[1] }}"
          "{{ item[0] | lower }}_port": "{{ item[4] | int }}"
          "{{ item[0] | lower }}_database": "{{ item[2] }}"
          "{{ item[0] | lower }}_service": "{{ item[3] if item[3] != 'null' else '' }}"
          "{{ item[0] | lower }}_version": "{{ item[5] }}"
          "{{ item[0] | lower }}_username": "{{ item[6] if item | length > 6 else default_username }}"
          "{{ item[0] | lower }}_host_id": "{{ item[1] | replace('.', '_') | replace('-', '_') }}_{{ item[2] }}_{{ item[4] }}"
        current_password: "{{ item[7:] | join(' ') if item | length > 7 else 'CHANGE_ME' }}"
      loop: "{{ parsed_lines }}"
      register: processed_entries

    - name: Build MSSQL hosts
      set_fact:
        mssql_hosts: "{{ mssql_hosts | combine({item.ansible_facts.current_host_id: item.ansible_facts.current_host_vars}) }}"
        vault_passwords: "{{ vault_passwords | combine({'vault_' + item.ansible_facts.current_host_id + '_password': item.ansible_facts.current_password}) }}"
      loop: "{{ processed_entries.results }}"
      when: item.ansible_facts.current_platform == 'MSSQL'

    - name: Build Oracle hosts
      set_fact:
        oracle_hosts: "{{ oracle_hosts | combine({item.ansible_facts.current_host_id: item.ansible_facts.current_host_vars}) }}"
        vault_passwords: "{{ vault_passwords | combine({'vault_' + item.ansible_facts.current_host_id + '_password': item.ansible_facts.current_password}) }}"
      loop: "{{ processed_entries.results }}"
      when: item.ansible_facts.current_platform == 'ORACLE'

    - name: Build Sybase hosts
      set_fact:
        sybase_hosts: "{{ sybase_hosts | combine({item.ansible_facts.current_host_id: item.ansible_facts.current_host_vars}) }}"
        vault_passwords: "{{ vault_passwords | combine({'vault_' + item.ansible_facts.current_host_id + '_password': item.ansible_facts.current_password}) }}"
      loop: "{{ processed_entries.results }}"
      when: item.ansible_facts.current_platform == 'SYBASE'

    - name: Create final inventory structure
      set_fact:
        inventory_data:
          all:
            vars:
              base_results_dir: "/tmp/compliance_scans"
              ansible_connection: "local"
              inspec_debug_mode: false
              ansible_python_interpreter: "{{ ansible_playbook_python }}"
            children:
              mssql_databases:
                hosts: "{{ mssql_hosts }}"
              oracle_databases:
                hosts: "{{ oracle_hosts }}"
              sybase_databases:
                hosts: "{{ sybase_hosts }}"

    - name: Write inventory file
      copy:
        content: "{{ inventory_data | to_nice_yaml(indent=2) }}"
        dest: "{{ inventory_output }}"
        mode: '0644'

    - name: Create group_vars files
      block:
        - name: Write all group vars
          copy:
            content: |
              ---
              # Global variables for all database compliance scanning

              # Base configuration
              base_results_dir: /tmp/compliance_scans
              ansible_connection: local
              ansible_python_interpreter: "{{ ansible_playbook_python }}"

              # InSpec settings
              inspec_debug_mode: false
              inspec_timeout: 300
              inspec_binary_path: /usr/bin/inspec

              # Execution control
              batch_size: 5
              execution_strategy: linear

              # Splunk integration
              send_to_splunk: false
              splunk_hec_url: ""
              splunk_hec_token: ""
              splunk_index: compliance_scans

              # Notification settings
              send_notifications: false
              notification_email: ""
              archive_results: false
            dest: "group_vars/all/main.yml"
            mode: '0644'

        - name: Write MSSQL group vars
          copy:
            content: |
              ---
              # MSSQL-specific variables

              # Password lookup pattern for MSSQL databases
              mssql_password: "{{ lookup('vars', 'vault_' + mssql_host_id + '_password', default='') }}"

              # MSSQL-specific settings
              mssql_trust_server_certificate: "Yes"
              mssql_connection_timeout: 30
            dest: "group_vars/mssql_databases/main.yml"
            mode: '0644'
          when: inventory_data.all.children.mssql_databases.hosts | length > 0

        - name: Write Oracle group vars
          copy:
            content: |
              ---
              # Oracle-specific variables

              # Password lookup pattern for Oracle databases
              oracle_password: "{{ lookup('vars', 'vault_' + oracle_host_id + '_password', default='') }}"

              # Oracle-specific settings
              oracle_connection_timeout: 30
              oracle_tns_admin: ""
            dest: "group_vars/oracle_databases/main.yml"
            mode: '0644'
          when: inventory_data.all.children.oracle_databases.hosts | length > 0

        - name: Write Sybase group vars
          copy:
            content: |
              ---
              # Sybase-specific variables

              # Password lookup pattern for Sybase databases
              sybase_password: "{{ lookup('vars', 'vault_' + sybase_host_id + '_password', default='') }}"

              # Sybase-specific settings
              sybase_connection_timeout: 30
              sybase_ssh_enabled: true
              sybase_ssh_user: oracle
            dest: "group_vars/sybase_databases/main.yml"
            mode: '0644'
          when: inventory_data.all.children.sybase_databases.hosts | length > 0

    - name: Handle vault file creation
      block:
        - name: Write vault file (unencrypted)
          copy:
            content: |
              ---
              # Ansible Vault file for database passwords
              # This file contains sensitive information and should be encrypted
              # Encrypt with: ansible-vault encrypt {{ vault_output }} --vault-password-file .vaultpass

              {{ vault_passwords | to_nice_yaml(indent=2) }}
            dest: "{{ vault_output }}"
            mode: '0600'
          when: not encrypt_vault

        - name: Write and encrypt vault file
          block:
            - name: Create temporary vault file
              copy:
                content: |
                  ---
                  # Ansible Vault file for database passwords
                  {{ vault_passwords | to_nice_yaml(indent=2) }}
                dest: "/tmp/vault_temp.yml"
                mode: '0600'

            - name: Encrypt vault file
              shell: |
                ansible-vault encrypt /tmp/vault_temp.yml --vault-password-file .vaultpass --output {{ vault_output }}
              args:
                creates: "{{ vault_output }}"

            - name: Remove temporary file
              file:
                path: "/tmp/vault_temp.yml"
                state: absent
          when:
            - encrypt_vault
            - vault_passwords | length > 0
      when:
        - create_vault_file
        - vault_passwords | length > 0

    - name: Display conversion summary
      debug:
        msg: |
          =====================================
          Conversion Complete
          =====================================
          Input file: {{ flatfile_path }}

          Generated files:
          - Inventory: {{ inventory_output }}
          - Group vars: group_vars/all/main.yml
          {% if inventory_data.all.children.mssql_databases.hosts | length > 0 -%}
          - MSSQL vars: group_vars/mssql_databases/main.yml
          {% endif -%}
          {% if inventory_data.all.children.oracle_databases.hosts | length > 0 -%}
          - Oracle vars: group_vars/oracle_databases/main.yml
          {% endif -%}
          {% if inventory_data.all.children.sybase_databases.hosts | length > 0 -%}
          - Sybase vars: group_vars/sybase_databases/main.yml
          {% endif -%}
          {% if create_vault_file and vault_passwords | length > 0 -%}
          - Vault file: {{ vault_output }}{% if encrypt_vault %} (encrypted){% endif %}
          {% endif %}

          Database counts:
          - MSSQL: {{ inventory_data.all.children.mssql_databases.hosts | length }}
          - Oracle: {{ inventory_data.all.children.oracle_databases.hosts | length }}
          - Sybase: {{ inventory_data.all.children.sybase_databases.hosts | length }}

          Usage:
          ansible-playbook -i {{ inventory_output }} run_mssql_inspec.yml{% if create_vault_file and encrypt_vault %} -e @{{ vault_output }} --vault-password-file .vaultpass{% endif %}

# Example usage:
# ansible-playbook convert_flatfile_playbook.yml
# ansible-playbook convert_flatfile_playbook.yml -e input_file=production_databases.txt
# ansible-playbook convert_flatfile_playbook.yml -e input_file=databases.txt -e output_inventory=prod_inventory.yml
# ansible-playbook convert_flatfile_playbook.yml -e vault_encrypt=false  # For testing