# Kyverno Mutation Policies for Safe VPA-NAP Integration
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: vpa-safe-mutation-policies
  annotations:
    policies.kyverno.io/title: VPA Safe Mutation Policies
    policies.kyverno.io/category: Resource Management, Multi-Tenancy
    policies.kyverno.io/description: >-
      Automatically applies safe VPA configurations and NAP coordination settings
spec:
  validationFailureAction: enforce
  background: true
  rules:
  
  # Rule 1: Auto-inject VPA coordination metadata
  - name: inject-vpa-coordination-metadata
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            # Inject coordination strategy based on namespace tier
            nap-coordination: |-
              {{- if contains(request.namespace, 'premium') -}}
                isolated
              {{- else if contains(request.namespace, 'dev') -}}
                coordinated  
              {{- else -}}
                coordinated
              {{- end }}
            # Track VPA creation timestamp for rate limiting
            vpa-created: "{{ time_now_utc() }}"
            # Add conflict risk assessment
            conflict-risk: |-
              {{- if eq(request.object.spec.updatePolicy.updateMode, 'Auto') -}}
                high
              {{- else if eq(request.object.spec.updatePolicy.updateMode, 'Initial') -}}
                medium
              {{- else -}}
                low
              {{- end }}
          annotations:
            # Track last successful update for cooldown enforcement
            last-update-time: "{{ time_now_utc() }}"
            # Add NAP coordination instructions
            nap-coordination-config: |-
              consolidate-delay: 30m
              scale-down-threshold: 0.6
              buffer-percent: 20

  # Rule 2: Apply resource safety buffers
  - name: apply-resource-safety-buffers
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
    mutate:
      patchStrategicMerge:
        spec:
          resourcePolicy:
            containerPolicies:
            - containerName: "*"
              # Add safety margins to prevent NAP triggers
              =(minAllowed):
                cpu: |-
                  {{- $originalCpu := request.object.spec.resourcePolicy.containerPolicies[0].minAllowed.cpu | default "100m" -}}
                  {{- if contains(request.namespace, 'premium') -}}
                    {{ max($originalCpu, "500m") }}
                  {{- else if contains(request.namespace, 'dev') -}}
                    {{ max($originalCpu, "50m") }}
                  {{- else -}}
                    {{ max($originalCpu, "100m") }}
                  {{- end }}
                memory: |-
                  {{- $originalMem := request.object.spec.resourcePolicy.containerPolicies[0].minAllowed.memory | default "128Mi" -}}
                  {{- if contains(request.namespace, 'premium') -}}
                    {{ max($originalMem, "512Mi") }}
                  {{- else if contains(request.namespace, 'dev') -}}
                    {{ max($originalMem, "64Mi") }}
                  {{- else -}}
                    {{ max($originalMem, "128Mi") }}
                  {{- end }}
              # Apply tier-appropriate max limits
              =(maxAllowed):
                cpu: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    "16"
                  {{- else if contains(request.namespace, 'dev') -}}
                    "2"
                  {{- else -}}
                    "8"
                  {{- end }}
                memory: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    "32Gi"
                  {{- else if contains(request.namespace, 'dev') -}}
                    "4Gi"
                  {{- else -}}
                    "16Gi"
                  {{- end }}

  # Rule 3: Inject rate limiting configuration
  - name: inject-rate-limiting-config
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
    mutate:
      patchStrategicMerge:
        spec:
          =(updatePolicy):
            # Add eviction requirements to prevent conflicts
            =(evictionRequirements):
            - resources:
                requests:
                  cpu: |-
                    {{- if eq(request.object.spec.updatePolicy.updateMode, 'Auto') -}}
                      "1"
                    {{- else -}}
                      "500m"
                    {{- end }}
                  memory: |-
                    {{- if eq(request.object.spec.updatePolicy.updateMode, 'Auto') -}}
                      "2Gi"
                    {{- else -}}
                      "1Gi"
                    {{- end }}
              changeRequirement: "TargetHigherThanRequests"
            # Set minimum replicas based on tier
            =(minReplicas): |-
              {{- if contains(request.namespace, 'premium') -}}
                3
              {{- else if contains(request.namespace, 'dev') -}}
                1
              {{- else -}}
                2
              {{- end }}

  # Rule 4: Add NAP coordination toleration
  - name: add-nap-coordination-tolerations
    match:
      any:
      - resources:
          kinds:
          - Deployment
          - StatefulSet
    preconditions:
      any:
      - key: "{{ request.object.metadata.labels.\"vpa-enabled\" || 'false' }}"
        operator: Equals
        value: "true"
    mutate:
      patchStrategicMerge:
        spec:
          template:
            spec:
              # Add node selector based on VPA coordination strategy
              =(nodeSelector):
                node-pool: |-
                  {{- $strategy := request.object.metadata.labels."nap-coordination" | default "coordinated" -}}
                  {{- if eq($strategy, "isolated") -}}
                    vpa-dedicated
                  {{- else if eq($strategy, "coordinated") -}}
                    hybrid
                  {{- else -}}
                    standard
                  {{- end }}
              # Add tolerations for VPA-managed nodes
              =(tolerations):
              - key: "vpa-managed"
                operator: "Equal"
                value: "true"
                effect: "NoSchedule"
              - key: "node-pool"
                operator: "Equal"
                value: "vpa-dedicated"
                effect: "NoSchedule"

---
# Workload Mutation Based on VPA Settings
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: workload-vpa-mutation
  annotations:
    policies.kyverno.io/title: Workload VPA Mutation
    policies.kyverno.io/description: >-
      Mutates workloads to be compatible with VPA-NAP coordination
spec:
  validationFailureAction: enforce
  background: true
  rules:
  
  # Rule 1: Add VPA-NAP coordination labels to workloads
  - name: add-coordination-labels-to-workloads
    match:
      any:
      - resources:
          kinds:
          - Deployment
          - StatefulSet
          - DaemonSet
    preconditions:
      any:
      - key: "{{ request.object.metadata.labels.\"vpa-enabled\" || 'false' }}"
        operator: Equals
        value: "true"
    mutate:
      patchStrategicMerge:
        metadata:
          labels:
            # Add coordination tracking
            vpa-nap-coordination: "enabled"
            # Add workload stability class
            stability-class: |-
              {{- if contains(request.object.metadata.name, 'database') -}}
                critical
              {{- else if contains(request.namespace, 'premium') -}}
                high
              {{- else if contains(request.namespace, 'dev') -}}
                low
              {{- else -}}
                medium
              {{- end }}
            # Add resource tier
            resource-tier: |-
              {{- if contains(request.namespace, 'premium') -}}
                premium
              {{- else if contains(request.namespace, 'dev') -}}
                dev
              {{- else -}}
                standard
              {{- end }}

  # Rule 2: Inject resource monitoring sidecar
  - name: inject-resource-monitoring-sidecar
    match:
      any:
      - resources:
          kinds:
          - Deployment
          - StatefulSet
    preconditions:
      any:
      - key: "{{ request.object.metadata.labels.\"vpa-enabled\" || 'false' }}"
        operator: Equals
        value: "true"
      - key: "{{ request.object.metadata.labels.\"inject-monitoring\" || 'false' }}"
        operator: Equals
        value: "true"
    mutate:
      patchStrategicMerge:
        spec:
          template:
            spec:
              containers:
              - name: resource-monitor
                image: platform/resource-monitor:v1.0.0
                env:
                - name: WORKLOAD_NAME
                  value: "{{ request.object.metadata.name }}"
                - name: NAMESPACE
                  value: "{{ request.namespace }}"
                - name: VPA_COORDINATION
                  value: "{{ request.object.metadata.labels.\"nap-coordination\" || 'coordinated' }}"
                resources:
                  requests:
                    cpu: "10m"
                    memory: "32Mi"
                  limits:
                    cpu: "50m"
                    memory: "128Mi"
                volumeMounts:
                - name: metrics-data
                  mountPath: /var/metrics
              volumes:
              - name: metrics-data
                emptyDir:
                  sizeLimit: "100Mi"

  # Rule 3: Apply Pod Disruption Budget for VPA workloads
  - name: ensure-pod-disruption-budget
    match:
      any:
      - resources:
          kinds:
          - Deployment
    preconditions:
      any:
      - key: "{{ request.object.metadata.labels.\"vpa-enabled\" || 'false' }}"
        operator: Equals
        value: "true"
      - key: "{{ request.object.spec.replicas }}"
        operator: GreaterThan
        value: 1
    mutate:
      targets:
      - apiVersion: policy/v1
        kind: PodDisruptionBudget
        namespace: "{{ request.namespace }}"
      patchStrategicMerge:
        metadata:
          name: "{{ request.object.metadata.name }}-pdb"
          namespace: "{{ request.namespace }}"
          labels:
            app: "{{ request.object.metadata.name }}"
            managed-by: "kyverno-vpa-coordination"
        spec:
          selector:
            matchLabels:
              app: "{{ request.object.metadata.name }}"
          # Set disruption budget based on tier and VPA mode
          minAvailable: |-
            {{- $replicas := request.object.spec.replicas | to_number -}}
            {{- if contains(request.namespace, 'premium') -}}
              {{ sub($replicas, 1) | max(1) }}
            {{- else if contains(request.namespace, 'dev') -}}
              1
            {{- else -}}
              {{ div($replicas, 2) | max(1) }}
            {{- end }}

---
# Emergency Circuit Breaker Mutation
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: emergency-circuit-breaker-mutation
  annotations:
    policies.kyverno.io/title: Emergency Circuit Breaker
    policies.kyverno.io/description: >-
      Automatically modifies VPA settings during emergency conditions
spec:
  validationFailureAction: enforce
  background: true
  rules:
  
  # Rule 1: Downgrade VPA mode during cluster instability
  - name: emergency-vpa-downgrade
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
        operations:
        - CREATE
        - UPDATE
    context:
    - name: clusterStability
      configMap:
        name: cluster-stability-status
        namespace: kube-system
    preconditions:
      any:
      - key: "{{ clusterStability.data.\"circuit-breaker-active\" || 'false' }}"
        operator: Equals
        value: "true"
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            emergency-mode: "circuit-breaker-active"
            original-update-mode: "{{ request.object.spec.updatePolicy.updateMode }}"
        spec:
          updatePolicy:
            updateMode: "Off"  # Force to recommendation-only mode

  # Rule 2: Add emergency contact annotations
  - name: add-emergency-annotations
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
    mutate:
      patchStrategicMerge:
        metadata:
          annotations:
            # Emergency procedures
            emergency-disable-command: |
              kubectl patch vpa {{ request.object.metadata.name }} -n {{ request.namespace }} \
              --type merge -p '{"spec":{"updatePolicy":{"updateMode":"Off"}}}'
            # Escalation contacts
            emergency-contact: |-
              {{- if contains(request.namespace, 'premium') -}}
                platform-oncall-premium@company.com
              {{- else -}}
                platform-oncall@company.com
              {{- end }}
            # Monitoring dashboard
            monitoring-dashboard: |
              https://monitoring.company.com/d/vpa-nap/{{ request.namespace }}/{{ request.object.metadata.name }}
            # Rollback procedure  
            rollback-procedure: |
              1. Set updateMode to 'Off'
              2. Check cluster stability metrics
              3. Contact platform team if needed
              4. Document incident in runbook