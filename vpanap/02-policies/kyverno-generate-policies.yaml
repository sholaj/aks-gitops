# Kyverno Generate Policies for Tenant VPA Automation
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: tenant-vpa-automation
  annotations:
    policies.kyverno.io/title: Tenant VPA Automation
    policies.kyverno.io/category: Multi-Tenancy, Automation
    policies.kyverno.io/description: >-
      Automatically generates VPA resources and supporting configurations for tenant workloads
spec:
  validationFailureAction: enforce
  background: true
  generateExistingOnPolicyUpdate: true
  rules:
  
  # Rule 1: Auto-generate VPA for eligible deployments
  - name: auto-generate-vpa-for-deployments
    match:
      any:
      - resources:
          kinds:
          - Deployment
          namespaces:
          - "tenant-*"
    preconditions:
      all:
      - key: "{{ request.object.metadata.labels.\"vpa-enabled\" || 'false' }}"
        operator: Equals
        value: "true"
      - key: "{{ request.object.metadata.labels.\"workload-type\" || '' }}"
        operator: NotEquals
        value: "database"
    generate:
      apiVersion: autoscaling.k8s.io/v1
      kind: VerticalPodAutoscaler
      name: "{{ request.object.metadata.name }}-vpa"
      namespace: "{{ request.namespace }}"
      synchronize: true
      data:
        metadata:
          labels:
            app: "{{ request.object.metadata.name }}"
            managed-by: "kyverno-tenant-automation"
            tenant-tier: |-
              {{- if contains(request.namespace, 'premium') -}}
                premium
              {{- else if contains(request.namespace, 'dev') -}}
                dev
              {{- else -}}
                standard
              {{- end }}
            workload-type: "{{ request.object.metadata.labels.\"workload-type\" || 'webapp' }}"
            nap-coordination: |-
              {{- if contains(request.namespace, 'premium') -}}
                isolated
              {{- else -}}
                coordinated
              {{- end }}
          annotations:
            generated-by: "kyverno-tenant-vpa-automation"
            generation-timestamp: "{{ now | dateInZone \"UTC\" }}"
        spec:
          targetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: "{{ request.object.metadata.name }}"
          updatePolicy:
            updateMode: |-
              {{- if contains(request.namespace, 'premium') -}}
                Off
              {{- else if contains(request.namespace, 'dev') -}}
                Auto
              {{- else -}}
                Initial
              {{- end }}
            minReplicas: |-
              {{- if contains(request.namespace, 'premium') -}}
                3
              {{- else if contains(request.namespace, 'dev') -}}
                1
              {{- else -}}
                2
              {{- end }}
          resourcePolicy:
            containerPolicies:
            - containerName: "*"
              minAllowed:
                cpu: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    500m
                  {{- else if contains(request.namespace, 'dev') -}}
                    50m
                  {{- else -}}
                    100m
                  {{- end }}
                memory: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    512Mi
                  {{- else if contains(request.namespace, 'dev') -}}
                    64Mi
                  {{- else -}}
                    128Mi
                  {{- end }}
              maxAllowed:
                cpu: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    16
                  {{- else if contains(request.namespace, 'dev') -}}
                    2
                  {{- else -}}
                    8
                  {{- end }}
                memory: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    32Gi
                  {{- else if contains(request.namespace, 'dev') -}}
                    4Gi
                  {{- else -}}
                    16Gi
                  {{- end }}
              controlledValues: |-
                {{- if contains(request.namespace, 'dev') -}}
                  RequestsAndLimits
                {{- else -}}
                  RequestsOnly
                {{- end }}
              mode: |-
                {{- if contains(request.namespace, 'premium') -}}
                  Off
                {{- else if contains(request.namespace, 'dev') -}}
                  Auto
                {{- else -}}
                  Initial
                {{- end }}

  # Rule 2: Generate tenant-specific monitoring configmap
  - name: generate-tenant-monitoring-config
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
          namespaces:
          - "tenant-*"
    generate:
      apiVersion: v1
      kind: ConfigMap
      name: "{{ request.object.metadata.name }}-monitoring"
      namespace: "{{ request.namespace }}"
      synchronize: true
      data:
        metadata:
          labels:
            app: "{{ request.object.spec.targetRef.name }}"
            component: "monitoring"
            managed-by: "kyverno-tenant-automation"
        data:
          prometheus-rules.yaml: |
            groups:
            - name: vpa-{{ request.object.metadata.name }}
              rules:
              - alert: VPARecommendationDrift
                expr: |
                  vpa_recommendation_diff_percent{vpa="{{ request.object.metadata.name }}", namespace="{{ request.namespace }}"} > 30
                for: 15m
                labels:
                  severity: warning
                  tenant: "{{ request.namespace }}"
                annotations:
                  summary: "VPA recommendations drifting for {{ request.object.metadata.name }}"
                  description: "VPA {{ request.object.metadata.name }} recommendations have drifted {{ $value }}% from current requests"
              
              - alert: VPAConflictRisk
                expr: |
                  (rate(cluster_autoscaler_nodes_count[5m]) != 0) and 
                  (rate(vpa_updater_evictions_total{vpa="{{ request.object.metadata.name }}"}[5m]) > 0)
                for: 5m
                labels:
                  severity: critical
                  tenant: "{{ request.namespace }}"
                annotations:
                  summary: "VPA-NAP conflict detected for {{ request.object.metadata.name }}"
                  description: "Simultaneous VPA evictions and NAP scaling detected"
          
          dashboard.json: |
            {
              "dashboard": {
                "title": "VPA Monitoring - {{ request.object.metadata.name }}",
                "panels": [
                  {
                    "title": "Resource Recommendations vs Usage",
                    "targets": [
                      {
                        "expr": "vpa_recommendation{vpa='{{ request.object.metadata.name }}', namespace='{{ request.namespace }}'}",
                        "legendFormat": "VPA Recommendation"
                      },
                      {
                        "expr": "container_memory_usage_bytes{pod=~'{{ request.object.spec.targetRef.name }}-.*', namespace='{{ request.namespace }}'}",
                        "legendFormat": "Actual Usage"
                      }
                    ]
                  },
                  {
                    "title": "VPA Update Events",
                    "targets": [
                      {
                        "expr": "rate(vpa_updater_evictions_total{vpa='{{ request.object.metadata.name }}'}[5m])",
                        "legendFormat": "Eviction Rate"
                      }
                    ]
                  }
                ]
              }
            }
          
          alerting-contacts.yaml: |
            contacts:
              primary: "{{ request.object.metadata.labels.\"tenant-contact\" || 'platform-team@company.com' }}"
              escalation: |-
                {{- if contains(request.namespace, 'premium') -}}
                  platform-oncall-premium@company.com
                {{- else -}}
                  platform-oncall@company.com
                {{- end }}
              slack: "#{{ request.namespace }}-alerts"

  # Rule 3: Generate NAP coordination configmap
  - name: generate-nap-coordination-config
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
          namespaces:
          - "tenant-*"
    preconditions:
      any:
      - key: "{{ request.object.metadata.labels.\"nap-coordination\" || 'coordinated' }}"
        operator: Equals
        value: "coordinated"
    generate:
      apiVersion: v1
      kind: ConfigMap
      name: "{{ request.object.metadata.name }}-nap-config"
      namespace: "{{ request.namespace }}"
      synchronize: true
      data:
        metadata:
          labels:
            app: "{{ request.object.spec.targetRef.name }}"
            component: "nap-coordination"
            managed-by: "kyverno-tenant-automation"
        data:
          coordination.yaml: |
            napCoordination:
              enabled: true
              strategy: "coordinated"
              
              # Timing coordination
              delays:
                afterVPAUpdate: "{{ request.object.metadata.labels.\"vpa-nap-delay\" || '300s' }}"
                beforeNAPAction: "{{ request.object.metadata.labels.\"nap-action-delay\" || '600s' }}"
              
              # Resource buffers to prevent conflicts
              buffers:
                cpuPercent: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    25
                  {{- else if contains(request.namespace, 'dev') -}}
                    15
                  {{- else -}}
                    20
                  {{- end }}
                memoryPercent: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    25
                  {{- else if contains(request.namespace, 'dev') -}}
                    15
                  {{- else -}}
                    20
                  {{- end }}
              
              # Circuit breaker settings
              circuitBreaker:
                enabled: true
                thresholds:
                  nodeChurnPerHour: |-
                    {{- if contains(request.namespace, 'premium') -}}
                      2
                    {{- else if contains(request.namespace, 'dev') -}}
                      10
                    {{- else -}}
                      5
                    {{- end }}
                  evictionRatePerMinute: 5
                  resourceOscillationPercent: 30
                cooldownMinutes: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    60
                  {{- else -}}
                    30
                  {{- end }}
              
              # Node pool preferences
              nodePoolPreferences:
                primary: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    premium-dedicated
                  {{- else if contains(request.namespace, 'dev') -}}
                    dev-shared
                  {{- else -}}
                    standard-shared
                  {{- end }}
                fallback: "general-purpose"
                
          webhook-config.yaml: |
            # Webhook configuration for NAP coordinator
            webhookEndpoint: "https://nap-coordinator.platform.svc.cluster.local:8443/coordinate"
            events:
              - vpa-recommendation-change
              - vpa-eviction-started
              - node-scaling-event
            authentication:
              type: "service-account"
              serviceAccount: "nap-coordinator"

  # Rule 4: Generate emergency procedures configmap
  - name: generate-emergency-procedures
    match:
      any:
      - resources:
          kinds:
          - VerticalPodAutoscaler
          namespaces:
          - "tenant-*"
    generate:
      apiVersion: v1
      kind: ConfigMap
      name: "{{ request.object.metadata.name }}-emergency"
      namespace: "{{ request.namespace }}"
      synchronize: true
      data:
        metadata:
          labels:
            app: "{{ request.object.spec.targetRef.name }}"
            component: "emergency-procedures"
            managed-by: "kyverno-tenant-automation"
        data:
          procedures.yaml: |
            emergencyProcedures:
              
              # Level 1: Immediate VPA disable
              level1:
                trigger: "Any conflict detected"
                command: |
                  kubectl patch vpa {{ request.object.metadata.name }} -n {{ request.namespace }} \
                  --type merge -p '{"spec":{"updatePolicy":{"updateMode":"Off"}}}'
                timeline: "< 30 seconds"
                automation: true
              
              # Level 2: Workload stabilization
              level2:
                trigger: "Continued instability"
                command: |
                  # Scale up replicas for stability
                  kubectl scale deployment {{ request.object.spec.targetRef.name }} -n {{ request.namespace }} --replicas=3
                  # Remove resource limits temporarily
                  kubectl patch deployment {{ request.object.spec.targetRef.name }} -n {{ request.namespace }} \
                  --type json -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/resources/limits"}]'
                timeline: "< 5 minutes"
                automation: false
                approvalRequired: |-
                  {{- if contains(request.namespace, 'premium') -}}
                    true
                  {{- else -}}
                    false
                  {{- end }}
              
              # Level 3: Complete rollback
              level3:
                trigger: "System-wide impact"
                command: |
                  # Delete VPA
                  kubectl delete vpa {{ request.object.metadata.name }} -n {{ request.namespace }}
                  # Reset deployment to last known good
                  kubectl rollout undo deployment {{ request.object.spec.targetRef.name }} -n {{ request.namespace }}
                timeline: "< 15 minutes"
                automation: false
                approvalRequired: true
            
            contacts:
              immediate: |-
                {{- if contains(request.namespace, 'premium') -}}
                  platform-oncall-premium@company.com
                {{- else -}}
                  platform-oncall@company.com
                {{- end }}
              escalation:
                - "platform-engineering-lead@company.com"
                - "site-reliability-team@company.com"
              
            monitoring:
              dashboardUrl: "https://monitoring.company.com/d/emergency/{{ request.namespace }}/{{ request.object.metadata.name }}"
              alertingRules: "{{ request.object.metadata.name }}-monitoring"
              
            postIncident:
              reportTemplate: "https://wiki.company.com/vpa-nap-incident-template"
              reviewBoard: "platform-reliability-review"
              learningSession: "required for premium tier incidents"

---
# Generate Tenant Namespace Resources
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: tenant-namespace-vpa-setup
  annotations:
    policies.kyverno.io/title: Tenant Namespace VPA Setup
    policies.kyverno.io/description: >-
      Automatically sets up VPA infrastructure when new tenant namespaces are created
spec:
  validationFailureAction: enforce
  background: true
  rules:
  
  # Rule 1: Generate VPA RBAC for new tenant namespaces
  - name: generate-vpa-rbac
    match:
      any:
      - resources:
          kinds:
          - Namespace
          names:
          - "tenant-*"
    generate:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      name: "vpa-manager"
      namespace: "{{ request.object.metadata.name }}"
      synchronize: true
      data:
        rules:
        - apiGroups: ["autoscaling.k8s.io"]
          resources: ["verticalpodautoscalers"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: [""]
          resources: ["events"]
          verbs: ["get", "list", "watch", "create"]
        - apiGroups: ["apps"]
          resources: ["deployments", "replicasets"]
          verbs: ["get", "list", "watch", "update", "patch"]
  
  # Rule 2: Generate VPA service account
  - name: generate-vpa-service-account
    match:
      any:
      - resources:
          kinds:
          - Namespace
          names:
          - "tenant-*"
    generate:
      apiVersion: v1
      kind: ServiceAccount
      name: "vpa-manager"
      namespace: "{{ request.object.metadata.name }}"
      synchronize: true
  
  # Rule 3: Generate role binding
  - name: generate-vpa-role-binding
    match:
      any:
      - resources:
          kinds:
          - Namespace
          names:
          - "tenant-*"
    generate:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      name: "vpa-manager"
      namespace: "{{ request.object.metadata.name }}"
      synchronize: true
      data:
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: "vpa-manager"
        subjects:
        - kind: ServiceAccount
          name: "vpa-manager"
          namespace: "{{ request.object.metadata.name }}"