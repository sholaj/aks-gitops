# VPA-NAP Coordinator Alternative Implementation
# This provides the coordinator functionality without a custom controller
# Uses CronJobs, Custom Resources, and existing Kubernetes primitives

---
# Custom Resource Definition for VPA-NAP Coordination State
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: vpanapcoordinations.platform.io
spec:
  group: platform.io
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              vpaName:
                type: string
              namespace:
                type: string
              coordinationStrategy:
                type: string
                enum: ["isolated", "coordinated", "disabled"]
              enabled:
                type: boolean
                default: true
          status:
            type: object
            properties:
              phase:
                type: string
                enum: ["Active", "CircuitBreaker", "Cooldown", "Error"]
              lastUpdate:
                type: string
                format: date-time
              conflictsDetected:
                type: integer
                default: 0
              napEvents:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    event:
                      type: string
                    nodeCount:
                      type: integer
              vpaEvents:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    event:
                      type: string
                    recommendation:
                      type: object
              circuitBreakerTriggered:
                type: boolean
                default: false
              cooldownUntil:
                type: string
                format: date-time
  scope: Namespaced
  names:
    plural: vpanapcoordinations
    singular: vpanapcoordination
    kind: VPANAPCoordination
    shortNames:
    - vpanap

---
# Service Account for Coordinator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vpa-nap-coordinator
  namespace: platform

---
# ClusterRole for Coordinator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-nap-coordinator
rules:
- apiGroups: ["autoscaling.k8s.io"]
  resources: ["verticalpodautoscalers"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["platform.io"]
  resources: ["vpanapcoordinations"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding for Coordinator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-nap-coordinator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-nap-coordinator
subjects:
- kind: ServiceAccount
  name: vpa-nap-coordinator
  namespace: platform

---
# ConfigMap with Coordinator Logic Scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: vpa-nap-coordinator-scripts
  namespace: platform
data:
  coordinator.sh: |
    #!/bin/bash
    # VPA-NAP Coordinator Logic
    
    set -euo pipefail
    
    # Configuration
    CIRCUIT_BREAKER_NODE_CHANGES_THRESHOLD=${CIRCUIT_BREAKER_NODE_CHANGES_THRESHOLD:-5}
    CIRCUIT_BREAKER_EVICTIONS_THRESHOLD=${CIRCUIT_BREAKER_EVICTIONS_THRESHOLD:-20}
    COOLDOWN_MINUTES=${COOLDOWN_MINUTES:-30}
    CHECK_INTERVAL=${CHECK_INTERVAL:-60}
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') [VPA-NAP-COORDINATOR] $*"
    }
    
    # Function to check cluster stability
    check_cluster_stability() {
        local now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        local five_min_ago=$(date -u -d '5 minutes ago' +"%Y-%m-%dT%H:%M:%SZ")
        local ten_min_ago=$(date -u -d '10 minutes ago' +"%Y-%m-%dT%H:%M:%SZ")
        
        # Check recent node events
        local node_events=$(kubectl get events --all-namespaces \
            --field-selector involvedObject.kind=Node,reason=NodeReady \
            --output json | \
            jq ".items | map(select(.metadata.creationTimestamp > \"$five_min_ago\")) | length")
        
        # Check recent evictions
        local eviction_events=$(kubectl get events --all-namespaces \
            --field-selector reason=Evicted \
            --output json | \
            jq ".items | map(select(.metadata.creationTimestamp > \"$ten_min_ago\")) | length")
        
        log "Node events (5min): $node_events, Eviction events (10min): $eviction_events"
        
        if [[ $node_events -gt $CIRCUIT_BREAKER_NODE_CHANGES_THRESHOLD ]] || \
           [[ $eviction_events -gt $CIRCUIT_BREAKER_EVICTIONS_THRESHOLD ]]; then
            return 1  # Unstable
        fi
        
        return 0  # Stable
    }
    
    # Function to trigger circuit breaker
    trigger_circuit_breaker() {
        local namespace=$1
        local vpa_name=$2
        local reason=$3
        
        log "Triggering circuit breaker for VPA $vpa_name in namespace $namespace: $reason"
        
        # Disable VPA
        kubectl patch vpa "$vpa_name" -n "$namespace" \
            --type merge \
            --patch '{"spec":{"updatePolicy":{"updateMode":"Off"}}}'
        
        # Update coordination status
        local cooldown_until=$(date -u -d "+${COOLDOWN_MINUTES} minutes" +"%Y-%m-%dT%H:%M:%SZ")
        
        kubectl patch vpanapcoordination "$vpa_name" -n "$namespace" \
            --type merge \
            --patch "{
                \"status\": {
                    \"phase\": \"CircuitBreaker\",
                    \"lastUpdate\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                    \"circuitBreakerTriggered\": true,
                    \"cooldownUntil\": \"$cooldown_until\"
                }
            }" || true
        
        # Create event
        kubectl create event \
            --namespace "$namespace" \
            --type Warning \
            --reason CircuitBreakerTriggered \
            --message "VPA-NAP circuit breaker triggered: $reason" \
            --source VPANAPCoordinator \
            --related-api-version autoscaling.k8s.io/v1 \
            --related-kind VerticalPodAutoscaler \
            --related-name "$vpa_name" || true
    }
    
    # Function to check and clear cooldown
    check_cooldown() {
        local namespace=$1
        local vpa_name=$2
        
        local coordination_status=$(kubectl get vpanapcoordination "$vpa_name" -n "$namespace" -o json 2>/dev/null || echo "{}")
        local cooldown_until=$(echo "$coordination_status" | jq -r '.status.cooldownUntil // ""')
        local current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        if [[ -n "$cooldown_until" ]] && [[ "$current_time" > "$cooldown_until" ]]; then
            log "Cooldown period expired for VPA $vpa_name in namespace $namespace"
            
            kubectl patch vpanapcoordination "$vpa_name" -n "$namespace" \
                --type merge \
                --patch '{
                    "status": {
                        "phase": "Active",
                        "circuitBreakerTriggered": false,
                        "cooldownUntil": null
                    }
                }' || true
            
            return 0  # Cooldown cleared
        fi
        
        return 1  # Still in cooldown
    }
    
    # Function to monitor VPA
    monitor_vpa() {
        local namespace=$1
        local vpa_name=$2
        
        # Check if VPA exists
        if ! kubectl get vpa "$vpa_name" -n "$namespace" >/dev/null 2>&1; then
            return 0
        fi
        
        # Ensure coordination resource exists
        if ! kubectl get vpanapcoordination "$vpa_name" -n "$namespace" >/dev/null 2>&1; then
            kubectl apply -f - <<EOF
    apiVersion: platform.io/v1
    kind: VPANAPCoordination
    metadata:
      name: $vpa_name
      namespace: $namespace
    spec:
      vpaName: $vpa_name
      namespace: $namespace
      coordinationStrategy: coordinated
      enabled: true
    status:
      phase: Active
      lastUpdate: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
      conflictsDetected: 0
    EOF
        fi
        
        # Check if in cooldown
        if ! check_cooldown "$namespace" "$vpa_name"; then
            log "VPA $vpa_name in namespace $namespace is in cooldown"
            return 0
        fi
        
        # Check cluster stability
        if ! check_cluster_stability; then
            trigger_circuit_breaker "$namespace" "$vpa_name" "Cluster instability detected"
            return 0
        fi
        
        # Update coordination status
        kubectl patch vpanapcoordination "$vpa_name" -n "$namespace" \
            --type merge \
            --patch "{
                \"status\": {
                    \"phase\": \"Active\",
                    \"lastUpdate\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"
                }
            }" || true
        
        log "VPA $vpa_name in namespace $namespace is operating normally"
    }
    
    # Main coordination loop
    main() {
        log "Starting VPA-NAP coordinator"
        
        while true; do
            # Get all VPAs with coordination enabled
            kubectl get vpa --all-namespaces \
                -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{"\n"}{end}' | \
                while read -r namespace vpa_name; do
                    if [[ -n "$namespace" ]] && [[ -n "$vpa_name" ]]; then
                        # Check if this VPA has coordination enabled
                        local coordination_mode=$(kubectl get vpa "$vpa_name" -n "$namespace" \
                            -o jsonpath='{.metadata.labels.nap-coordination}' 2>/dev/null || echo "")
                        
                        if [[ "$coordination_mode" == "coordinated" ]]; then
                            monitor_vpa "$namespace" "$vpa_name"
                        fi
                    fi
                done
            
            log "Coordination check completed. Sleeping for $CHECK_INTERVAL seconds..."
            sleep "$CHECK_INTERVAL"
        done
    }
    
    # Handle termination gracefully
    trap 'log "Coordinator shutting down..."; exit 0' TERM INT
    
    main "$@"

  conflict-detector.sh: |
    #!/bin/bash
    # Conflict Detection Script
    
    set -euo pipefail
    
    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') [CONFLICT-DETECTOR] $*"
    }
    
    detect_conflicts() {
        local namespace=$1
        local vpa_name=$2
        
        # Check for simultaneous VPA evictions and NAP scaling
        local current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        local five_min_ago=$(date -u -d '5 minutes ago' +"%Y-%m-%dT%H:%M:%SZ")
        
        # Check for VPA evictions
        local vpa_evictions=$(kubectl get events -n "$namespace" \
            --field-selector reason=EvictedByVPA \
            --output json | \
            jq ".items | map(select(.metadata.creationTimestamp > \"$five_min_ago\")) | length")
        
        # Check for node scaling events
        local node_scaling=$(kubectl get events --all-namespaces \
            --field-selector reason=TriggeredScaleUp \
            --output json | \
            jq ".items | map(select(.metadata.creationTimestamp > \"$five_min_ago\")) | length")
        
        if [[ $vpa_evictions -gt 0 ]] && [[ $node_scaling -gt 0 ]]; then
            log "CONFLICT DETECTED: VPA evictions ($vpa_evictions) and NAP scaling ($node_scaling) in last 5 minutes"
            return 1
        fi
        
        return 0
    }
    
    # Run conflict detection for all coordinated VPAs
    kubectl get vpa --all-namespaces \
        -l nap-coordination=coordinated \
        -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{"\n"}{end}' | \
        while read -r namespace vpa_name; do
            if [[ -n "$namespace" ]] && [[ -n "$vpa_name" ]]; then
                if ! detect_conflicts "$namespace" "$vpa_name"; then
                    kubectl patch vpanapcoordination "$vpa_name" -n "$namespace" \
                        --type merge \
                        --patch "{
                            \"status\": {
                                \"conflictsDetected\": $(kubectl get vpanapcoordination "$vpa_name" -n "$namespace" -o jsonpath='{.status.conflictsDetected}' 2>/dev/null || echo 0) + 1
                            }
                        }" || true
                fi
            fi
        done

---
# Deployment for VPA-NAP Coordinator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpa-nap-coordinator
  namespace: platform
  labels:
    app: vpa-nap-coordinator
    component: coordination
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vpa-nap-coordinator
  template:
    metadata:
      labels:
        app: vpa-nap-coordinator
    spec:
      serviceAccountName: vpa-nap-coordinator
      containers:
      - name: coordinator
        image: bitnami/kubectl:latest
        command: ["/bin/bash"]
        args: ["/scripts/coordinator.sh"]
        env:
        - name: CIRCUIT_BREAKER_NODE_CHANGES_THRESHOLD
          value: "5"
        - name: CIRCUIT_BREAKER_EVICTIONS_THRESHOLD
          value: "20"
        - name: COOLDOWN_MINUTES
          value: "30"
        - name: CHECK_INTERVAL
          value: "60"
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "pgrep -f coordinator.sh"
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: scripts
        configMap:
          name: vpa-nap-coordinator-scripts
          defaultMode: 0755

---
# CronJob for Conflict Detection
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vpa-nap-conflict-detector
  namespace: platform
spec:
  schedule: "*/5 * * * *"  # Run every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vpa-nap-coordinator
          containers:
          - name: conflict-detector
            image: bitnami/kubectl:latest
            command: ["/bin/bash"]
            args: ["/scripts/conflict-detector.sh"]
            volumeMounts:
            - name: scripts
              mountPath: /scripts
            resources:
              requests:
                cpu: 50m
                memory: 64Mi
              limits:
                cpu: 200m
                memory: 128Mi
          volumes:
          - name: scripts
            configMap:
              name: vpa-nap-coordinator-scripts
              defaultMode: 0755
          restartPolicy: OnFailure

---
# Service Monitor for Prometheus Integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: vpa-nap-coordinator
  namespace: platform
spec:
  selector:
    matchLabels:
      app: vpa-nap-coordinator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Platform Namespace (if it doesn't exist)
apiVersion: v1
kind: Namespace
metadata:
  name: platform
  labels:
    name: platform
    component: vpa-nap-coordination